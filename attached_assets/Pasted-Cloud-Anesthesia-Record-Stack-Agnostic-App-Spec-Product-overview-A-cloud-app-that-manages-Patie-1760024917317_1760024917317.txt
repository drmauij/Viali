Cloud Anesthesia Record — Stack-Agnostic App Spec
Product overview

A cloud app that manages:

Patients (create/search/edit/archive).

Multiple cases per patient (“clinic events”).

Per case, three modules:

Pre-op record — manual entry + AI-assisted extraction from redacted docs; propose ASA and anesthesia plan.

Intra-op anesthesia record — timeline of vitals, ventilation, events, drugs, lines, airway; manual entry + AI from monitor photos & voice notes.

Post-op record — PACU/ward surveillance (vitals, events, analgesia, complications, disposition); manual + AI.

Privacy-first: de-identify locally before any AI call; optional strict mode that blocks uncertain PHI.

Data model (entities & fields)
Patient

id (string/uuid)

pseudoId (string, unique; HMAC of real MRN if used)

name (string|null) — optional in de-identified mode

yearOfBirth (int|null) or ageYears (int|null)

sex (“M”|“F”|“Other”|“Unknown”|null)

tags (string[]) — e.g., ["latex_allergy"]

archivedAt (datetime|null)

createdAt, updatedAt (datetime)

Case

id (string/uuid)

patientId (string)

title (string)

location (string|null)

plannedSurgery (string|null)

surgeon (string|null)

plannedDate (datetime|null)

status (“planned”|“ongoing”|“completed”|“archived”)

createdAt, updatedAt (datetime)

PreopRecord (1:1 with Case)

id (string/uuid), caseId (string)

demographics (json|null) — { age_years, sex }

asaClass (string|null) — I|II|III|IV|V

allergies (json|null) — [{substance, reaction?, severity?}]

medications (json|null) — [{drug, dose?, route?, freq?, indication?}]

comorbidities (json|null) — [string]

anesthesiaHistory (json|null) — {PONV?, MH?, difficult_airway?}

airway (json|null) — {mallampati?, mouth_opening?, dentition?, difficult_airway_history?}

fasting (json|null) — {last_solids?, last_clear?} ISO 8601

plannedAnesthesia (string|null)

notes (string|null)

aiAudit (json|null) — redaction masks, prompts, model IDs

updatedAt (datetime)

AnesthesiaRecord (1:1 with Case)

id, caseId

startTime, endTime (datetime|null)

airwayManagement (json|null) — {device:"ETT/LMA/mask", size, attempts, cormack_lehane?}

lines (json|null) — [{type, site, gauge_or_size, side, ts}]

notes (string|null)

updatedAt (datetime)

PostopRecord (1:1 with Case)

id, caseId

summary (string|null)

complications (json|null) — [string]

analgesia (json|null) — [{drug, dose?, route?, time?}]

disposition (string|null) — home|ward|ICU

notes (string|null)

updatedAt (datetime)

TimelineEntry (N:1 Case)

id, caseId

ts (datetime, UTC)

source (“manual”|“vision”|“voice”)

module (“intraop”|“postop”) — for filtering

vitals (json|null) — normalized map; see Normalization

ventilation (json|null)

events (json|null) — [{type, details}] (e.g., {"type":"intubation_start"})

drugs (json|null) — [{name, dose, unit?, route?, mode:"bolus|infusion|TCI", details?}]

installations (json|null) — lines/airway placements

rawNote (string|null) — original voice text if any

aiAudit (json|null)

createdAt (datetime)

Attachment (N:1 Case)

id, caseId

kind (“preop_doc”|“monitor_photo”|“voice_note”|“other”)

filename, path (string)

meta (json|null)

createdAt (datetime)

AuditEntry (N:1 Case)

id, caseId

userId (string|null)

action (string) — e.g., ai_extract_preop, create_timeline, edit_drug

details (json|null)

createdAt (datetime)

Normalization (labels & units)

Use canonical keys and units across the app:

Vitals: HR (bpm), NIBP_sys (mmHg), NIBP_dia (mmHg), NIBP_mean (mmHg), SpO2 (%), Temp (°C)

Ventilation: EtCO2 (mmHg), RR (/min), TV (mL), FiO2 (%), PEEP (cmH2O), Ppeak (cmH2O), Pmean (cmH2O), MAC

NMB: TOF_count, TOF_ratio (%)

TCI/Pumps: TCI_target (µg/mL or ng/mL), Pump_rate (mL/h)

Prefer numeric strings + a unit field per item.

API surface (HTTP-style contracts; adapt to your framework)
Patients

GET /api/patients?query=... → list (search by name, pseudoId, year)

POST /api/patients → create {pseudoId, name?, yearOfBirth?, ageYears?, sex?, tags?}

GET /api/patients/:id → patient detail

PATCH /api/patients/:id → update

DELETE /api/patients/:id → archive/soft delete

Cases

GET /api/patients/:patientId/cases

POST /api/cases → {patientId, title, plannedSurgery?, plannedDate?, location?, surgeon?}

GET /api/cases/:caseId

PATCH /api/cases/:caseId (status updates, metadata)

Pre-op (AI-assisted)

POST /api/cases/:caseId/preop/extract
Body: { text?: string, file?: multipart }
Server flow: parse/rasterize if file → de-identify text (emails/phones/IDs/DOB→age/mm-yyyy; optional name masking) → call PREOP_PROMPT (below) → return JSON + proposals → only save on explicit accept.

PATCH /api/cases/:caseId/preop → manual edits or accepting proposed fields

Intra-op (timeline)

Monitor photo → vision AI
POST /api/cases/:caseId/frames (multipart image)
Server: blur identifier regions → Vision VISION_PROMPT → normalize labels/units → create TimelineEntry (source="vision", module="intraop").

Voice → transcription → event
POST /api/cases/:caseId/voice (multipart audio)
Server: transcribe (STT) → parse with VOICE_EVENT_PROMPT → create TimelineEntry (source="voice").

Manual timeline entry
POST /api/cases/:caseId/timeline → { ts?, vitals?, ventilation?, events?, drugs?, installations?, module? }
PATCH /api/timeline/:entryId / DELETE /api/timeline/:entryId

Post-op

Use the same endpoints as intra-op; pass module="postop".

Attachments

GET /api/cases/:caseId/attachments

Uploads saved under project storage (e.g., /tmp/storage/<caseId>/... for demo)

Exports

GET /api/cases/:caseId/export.csv — long format: ts,module,label,value,unit,source,details_json

GET /api/cases/:caseId/export.pdf — printable anesthesia record (header, pre-op summary, intra-op timeline tables/mini-charts, post-op summary, signature blocks)

Privacy & de-identification (server-side rules)

Never send identifiers to AI. Apply these before AI calls:

Image redaction (monitor photos)

Heuristic: scan top/bottom 20% for text-like regions; blur boxes (Gaussian).

If PRIVACY_MODE=strict and uncertain detection → reject the upload.

Save blurred copy (and masks) for audit; optionally delete raw.

Text/PDF redaction (pre-op docs)

Replace emails, phone numbers, ID patterns (like [A-Z]{1,3}\d{4,}), full DOB with tokens ([EMAIL], [PHONE], [ID], [DOB_mm/yyyy]).

Convert DOB to age or month/year locally.

Optional simple name masking (two consecutive Capitalized words).

Keep a record of redaction spans in aiAudit.

Pseudonymization

Store only pseudoId (HMAC of real MRN with a local secret, not synced).

Keep timestamps in UTC; display in local timezone.

Config (env/secrets)

OPENAI_API_KEY

PRIVACY_MODE = strict|standard

DELETE_RAW_UPLOADS = true|false

TIMEZONE (e.g., Europe/Berlin)

MODEL_VISION, MODEL_TEXT, MODEL_STT

AI prompts (constants; adjust wording as needed)
VISION_PROMPT (monitor photos → normalized JSON)
You are an information extractor for anesthesia monitors and devices.
From this image:
- Detect device types: vitals / ventilator / pump / TOF / TCI / other.
- Extract parameters with labels, values, and units when visible.
- Normalize common labels to these keys: HR, NIBP_sys, NIBP_dia, NIBP_mean, SpO2, Temp, EtCO2, RR, TV, FiO2, PEEP, Ppeak, Pmean, MAC, TOF_count, TOF_ratio, TCI_target, Pump_rate.
- If multiple devices are visible, include them all.
Return ONLY JSON like:
{
  "device_type": ["vitals","ventilator"],
  "items": [
    {"label":"HR","value":"72","unit":"bpm","confidence":0.98},
    {"label":"NIBP_sys","value":"120","unit":"mmHg"},
    {"label":"NIBP_dia","value":"80","unit":"mmHg"},
    {"label":"SpO2","value":"98","unit":"%"},
    {"label":"EtCO2","value":"36","unit":"mmHg"},
    {"label":"PEEP","value":"5","unit":"cmH2O"}
  ]
}

VOICE_EVENT_PROMPT (voice note → event JSON)
Convert a short intraoperative note into one compact JSON event.
Examples:
- "Propofol fifty milligrams IV" -> {"event":"drug_bolus","drug":"propofol","dose":"50 mg","route":"IV"}
- "Intubation started" -> {"event":"intubation_start"}
- "Phenylephrine 50 micrograms" -> {"event":"drug_bolus","drug":"phenylephrine","dose":"50 mcg","route":"IV"}
Return ONLY JSON.

PREOP_PROMPT (redacted pre-op docs → fields + proposals)
From REDACTED preoperative documents, extract ONLY clinical facts (no identifiers).
Normalize medications to generic names where obvious. Output JSON with:
- demographics{age_years, sex}
- allergies[{substance, reaction?, severity?}]
- current_medications[{drug, dose?, route?, freq?, indication?}]
- comorbidities[string]
- airway{mallampati?, mouth_opening?, dentition?, difficult_airway?}
- anesthesia_history{PONV?, MH?, difficult_airway?}
- physical_status{ASA}
- fasting{last_solids, last_clear}   # ISO 8601 if present
- consent_flags{blood_products?}
- planned_anesthesia (if clearly stated)
- notes
Also include:
- proposed_ASA: "I|II|III|IV|V"
- proposed_anesthesia_plan: string (one paragraph rationale)
Return ONLY JSON.

UI behaviors (framework-neutral)

Patients list: search, create, archive/restore; badges (e.g., allergy, last ASA).

Patient detail: demographics; cases table with status; create case.

Case → Pre-op tab: manual form; AI Assist panel with:

upload PDF/image or paste text

side-by-side redaction preview (original vs redacted)

“Extract & Propose” → per-field accept/edit

Case → Anesthesia tab:

timeline table + optional mini charts (HR/SpO₂/EtCO₂)

upload monitor photo → append normalized vitals/ventilation (source=vision)

upload/record voice → append event (source=voice)

manual add/edit: vitals row, event, drug (bolus/infusion/TCI), lines, airway

show AI audit popover (inputs/outputs snippets)

Case → Post-op tab: similar to intra-op, with PACU-specific fields (pain/NRS, PONV, analgesia, disposition)

Exports tab: buttons for CSV and PDF; patient-level export link

Audit tab: chronological user and AI actions

Example payloads
Create patient (de-identified)
{
  "pseudoId": "HMAC_9f3a1c2b",
  "ageYears": 56,
  "sex": "F",
  "tags": ["latex_allergy"]
}

Timeline entry (vision)
{
  "ts": "2025-10-09T09:17:00Z",
  "source": "vision",
  "module": "intraop",
  "vitals": {
    "HR": {"value": "72", "unit": "bpm"},
    "SpO2": {"value": "98", "unit": "%"}
  },
  "ventilation": {
    "EtCO2": {"value": "36", "unit": "mmHg"},
    "PEEP": {"value": "5", "unit": "cmH2O"}
  },
  "aiAudit": {"model":"gpt-4o-mini","promptId":"vision_v1","masks":[[0,0,1200,200]]}
}

Voice → event
{
  "ts": "2025-10-09T09:20:30Z",
  "source": "voice",
  "module": "intraop",
  "events": [{"type":"drug_bolus","details":{"drug":"propofol","dose":"50 mg","route":"IV"}}],
  "rawNote": "Propofol 50 milligrams IV"
}

Pre-op extraction (result to accept)
{
  "demographics": {"age_years": 67, "sex": "M"},
  "asaClass": "III",
  "allergies": [{"substance":"penicillin","reaction":"rash","severity":"moderate"}],
  "current_medications": [{"drug":"amlodipine","dose":"5 mg","route":"PO","freq":"qday"}],
  "comorbidities": ["HTN","DM2"],
  "airway": {"mallampati":"III","dentition":"upper crown 11"},
  "anesthesia_history": {"PONV": true, "MH": false, "difficult_airway": false},
  "fasting": {"last_solids": "2025-10-09T06:00:00Z", "last_clear": "2025-10-09T08:00:00Z"},
  "planned_anesthesia": "GA with ETT",
  "notes": "Previous hypotension under GA; consider reduced induction dose.",
  "proposed_ASA": "III",
  "proposed_anesthesia_plan": "General anesthesia with ETT, opioid-sparing strategy due to OSA and HTN; consider PONV prophylaxis (dexamethasone + ondansetron)."
}

Acceptance tests (definition of done)

Patients & Cases

Create a de-identified patient (pseudoId + age + sex).

Create a case with planned surgery/date; tabs visible.

Pre-op

Upload/paste pre-op content containing identifiers → redaction preview appears.

Run extract → get structured fields + proposed ASA and anesthesia plan.

Accept per-field suggestions; edit manually; save.

Intra-op

Upload a sample monitor photo → normalized vitals/ventilation appended (source=vision).

Upload a short audio (“Propofol 50 mg IV”) → event added (source=voice).

Manually add: “Intubation start”, IV line (18G left forearm), airway (ETT 7.5).

Edit an entry; see audit entry created.

Post-op

Upload a PACU monitor image → vitals entry created (module=postop).

Add pain score and ondansetron event manually.

Exports & Audit

Download CSV and PDF; CSV lines have ts,module,label,value,unit,source,details_json.

Audit view lists AI actions with prompt/model identifiers and redaction masks.

Notes for your implementation

Keep manual override first-class: AI never auto-commits; always show a review step.

Store UTC timestamps; convert for display.

Abstract file storage (demo can use local /tmp/storage; easy to swap for S3 later).

Keep AI input/output snippets in aiAudit for traceability.

Provide a feature flag to disable all AI calls and rely on manual inputs only.