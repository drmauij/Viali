Cloud Anesthesia Record — Stack-Agnostic App Spec
Product overview

A cloud app that manages:

Patients (create/search/edit/archive).

Multiple cases per patient (“clinic events”).

Per case, three modules:

Pre-op record — manual entry + AI-assisted extraction from redacted docs; propose ASA and anesthesia plan.

Intra-op anesthesia record — timeline of vitals, ventilation, events, drugs, lines, airway; manual entry + AI from monitor photos & voice notes.

Post-op record — PACU/ward surveillance (vitals, events, analgesia, complications, disposition); manual + AI.

Privacy-first: de-identify locally before any AI call; optional strict mode that blocks uncertain PHI.

Data model (entities & fields)
Patient

id (string/uuid)

pseudoId (string, unique; HMAC of real MRN if used)

name (string|null) — optional in de-identified mode

yearOfBirth (int|null) or ageYears (int|null)

sex (“M”|“F”|“Other”|“Unknown”|null)

tags (string[]) — e.g., ["latex_allergy"]

archivedAt (datetime|null)

createdAt, updatedAt (datetime)

Case

id (string/uuid)

patientId (string)

title (string)

location (string|null)

plannedSurgery (string|null)

surgeon (string|null)

plannedDate (datetime|null)

status (“planned”|“ongoing”|“completed”|“archived”)

createdAt, updatedAt (datetime)

PreopRecord (1:1 with Case)

id (string/uuid), caseId (string)

demographics (json|null) — { age_years, sex }

asaClass (string|null) — I|II|III|IV|V

allergies (json|null) — [{substance, reaction?, severity?}]

medications (json|null) — [{drug, dose?, route?, freq?, indication?}]

comorbidities (json|null) — [string]

anesthesiaHistory (json|null) — {PONV?, MH?, difficult_airway?}

airway (json|null) — {mallampati?, mouth_opening?, dentition?, difficult_airway_history?}

fasting (json|null) — {last_solids?, last_clear?} ISO 8601

plannedAnesthesia (string|null)

notes (string|null)

aiAudit (json|null) — redaction masks, prompts, model IDs

updatedAt (datetime)

AnesthesiaRecord (1:1 with Case)

id, caseId

startTime, endTime (datetime|null)

airwayManagement (json|null) — {device:"ETT/LMA/mask", size, attempts, cormack_lehane?}

lines (json|null) — [{type, site, gauge_or_size, side, ts}]

notes (string|null)

updatedAt (datetime)

PostopRecord (1:1 with Case)

id, caseId

summary (string|null)

complications (json|null) — [string]

analgesia (json|null) — [{drug, dose?, route?, time?}]

disposition (string|null) — home|ward|ICU

notes (string|null)

updatedAt (datetime)

TimelineEntry (N:1 Case)

id, caseId

ts (datetime, UTC)

source (“manual”|“vision”|“voice”)

module (“intraop”|“postop”) — for filtering

vitals (json|null) — normalized map; see Normalization

ventilation (json|null)

events (json|null) — [{type, details}] (e.g., {"type":"intubation_start"})

drugs (json|null) — [{name, dose, unit?, route?, mode:"bolus|infusion|TCI", details?}]

installations (json|null) — lines/airway placements

rawNote (string|null) — original voice text if any

aiAudit (json|null)

createdAt (datetime)

Attachment (N:1 Case)

id, caseId

kind (“preop_doc”|“monitor_photo”|“voice_note”|“other”)

filename, path (string)

meta (json|null)

createdAt (datetime)

AuditEntry (N:1 Case)

id, caseId

userId (string|null)

action (string) — e.g., ai_extract_preop, create_timeline, edit_drug

details (json|null)

createdAt (datetime)

Normalization (labels & units)

Use canonical keys and units across the app:

Vitals: HR (bpm), NIBP_sys (mmHg), NIBP_dia (mmHg), NIBP_mean (mmHg), SpO2 (%), Temp (°C)

Ventilation: EtCO2 (mmHg), RR (/min), TV (mL), FiO2 (%), PEEP (cmH2O), Ppeak (cmH2O), Pmean (cmH2O), MAC

NMB: TOF_count, TOF_ratio (%)

TCI/Pumps: TCI_target (µg/mL or ng/mL), Pump_rate (mL/h)

Prefer numeric strings + a unit field per item.

API surface (HTTP-style contracts; adapt to your framework)
Patients

GET /api/patients?query=... → list (search by name, pseudoId, year)

POST /api/patients → create {pseudoId, name?, yearOfBirth?, ageYears?, sex?, tags?}

GET /api/patients/:id → patient detail

PATCH /api/patients/:id → update

DELETE /api/patients/:id → archive/soft delete

Cases

GET /api/patients/:patientId/cases

POST /api/cases → {patientId, title, plannedSurgery?, plannedDate?, location?, surgeon?}

GET /api/cases/:caseId

PATCH /api/cases/:caseId (status updates, metadata)

Pre-op (AI-assisted)

POST /api/cases/:caseId/preop/extract
Body: { text?: string, file?: multipart }
Server flow: parse/rasterize if file → de-identify text (emails/phones/IDs/DOB→age/mm-yyyy; optional name masking) → call PREOP_PROMPT (below) → return JSON + proposals → only save on explicit accept.

PATCH /api/cases/:caseId/preop → manual edits or accepting proposed fields

Intra-op (timeline)

Monitor photo → vision AI
POST /api/cases/:caseId/frames (multipart image)
Server: blur identifier regions → Vision VISION_PROMPT → normalize labels/units → create TimelineEntry (source="vision", module="intraop").

Voice → transcription → event
POST /api/cases/:caseId/voice (multipart audio)
Server: transcribe (STT) → parse with VOICE_EVENT_PROMPT → create TimelineEntry (source="voice").

Manual timeline entry
POST /api/cases/:caseId/timeline → { ts?, vitals?, ventilation?, events?, drugs?, installations?, module? }
PATCH /api/timeline/:entryId / DELETE /api/timeline/:entryId

Post-op

Use the same endpoints as intra-op; pass module="postop".

Attachments

GET /api/cases/:caseId/attachments

Uploads saved under project storage (e.g., /tmp/storage/<caseId>/... for demo)

Exports

GET /api/cases/:caseId/export.csv — long format: ts,module,label,value,unit,source,details_json

GET /api/cases/:caseId/export.pdf — printable anesthesia record (header, pre-op summary, intra-op timeline tables/mini-charts, post-op summary, signature blocks)

Privacy & de-identification (server-side rules)

Never send identifiers to AI. Apply these before AI calls:

Image redaction (monitor photos)

Heuristic: scan top/bottom 20% for text-like regions; blur boxes (Gaussian).

If PRIVACY_MODE=strict and uncertain detection → reject the upload.

Save blurred copy (and masks) for audit; optionally delete raw.

Text/PDF redaction (pre-op docs)

Replace emails, phone numbers, ID patterns (like [A-Z]{1,3}\d{4,}), full DOB with tokens ([EMAIL], [PHONE], [ID], [DOB_mm/yyyy]).

Convert DOB to age or month/year locally.

Optional simple name masking (two consecutive Capitalized words).

Keep a record of redaction spans in aiAudit.

Pseudonymization

Store only pseudoId (HMAC of real MRN with a local secret, not synced).

Keep timestamps in UTC; display in local timezone.

Config (env/secrets)

OPENAI_API_KEY

PRIVACY_MODE = strict|standard

DELETE_RAW_UPLOADS = true|false

TIMEZONE (e.g., Europe/Berlin)

MODEL_VISION, MODEL_TEXT, MODEL_STT

AI prompts (constants; adjust wording as needed)
VISION_PROMPT (monitor photos → normalized JSON)
You are an information extractor for anesthesia monitors and devices.
From this image:
- Detect device types: vitals / ventilator / pump / TOF / TCI / other.
- Extract parameters with labels, values, and units when visible.
- Normalize common labels to these keys: HR, NIBP_sys, NIBP_dia, NIBP_mean, SpO2, Temp, EtCO2, RR, TV, FiO2, PEEP, Ppeak, Pmean, MAC, TOF_count, TOF_ratio, TCI_target, Pump_rate.
- If multiple devices are visible, include them all.
Return ONLY JSON like:
{
  "device_type": ["vitals","ventilator"],
  "items": [
    {"label":"HR","value":"72","unit":"bpm","confidence":0.98},
    {"label":"NIBP_sys","value":"120","unit":"mmHg"},
    {"label":"NIBP_dia","value":"80","unit":"mmHg"},
    {"label":"SpO2","value":"98","unit":"%"},
    {"label":"EtCO2","value":"36","unit":"mmHg"},
    {"label":"PEEP","value":"5","unit":"cmH2O"}
  ]
}

VOICE_EVENT_PROMPT (voice note → event JSON)
Convert a short intraoperative note into one compact JSON event.
Examples:
- "Propofol fifty milligrams IV" -> {"event":"drug_bolus","drug":"propofol","dose":"50 mg","route":"IV"}
- "Intubation started" -> {"event":"intubation_start"}
- "Phenylephrine 50 micrograms" -> {"event":"drug_bolus","drug":"phenylephrine","dose":"50 mcg","route":"IV"}
Return ONLY JSON.

PREOP_PROMPT (redacted pre-op docs → fields + proposals)
From REDACTED preoperative documents, extract ONLY clinical facts (no identifiers).
Normalize medications to generic names where obvious. Output JSON with:
- demographics{age_years, sex}
- allergies[{substance, reaction?, severity?}]
- current_medications[{drug, dose?, route?, freq?, indication?}]
- comorbidities[string]
- airway{mallampati?, mouth_opening?, dentition?, difficult_airway?}
- anesthesia_history{PONV?, MH?, difficult_airway?}
- physical_status{ASA}
- fasting{last_solids, last_clear}   # ISO 8601 if present
- consent_flags{blood_products?}
- planned_anesthesia (if clearly stated)
- notes
Also include:
- proposed_ASA: "I|II|III|IV|V"
- proposed_anesthesia_plan: string (one paragraph rationale)
Return ONLY JSON.

UI behaviors (framework-neutral)

Patients list: search, create, archive/restore; badges (e.g., allergy, last ASA).

Patient detail: demographics; cases table with status; create case.

Case → Pre-op tab: manual form; AI Assist panel with:

upload PDF/image or paste text

side-by-side redaction preview (original vs redacted)

“Extract & Propose” → per-field accept/edit

Case → Anesthesia tab:

timeline table + optional mini charts (HR/SpO₂/EtCO₂)

upload monitor photo → append normalized vitals/ventilation (source=vision)

upload/record voice → append event (source=voice)

manual add/edit: vitals row, event, drug (bolus/infusion/TCI), lines, airway

show AI audit popover (inputs/outputs snippets)

Case → Post-op tab: similar to intra-op, with PACU-specific fields (pain/NRS, PONV, analgesia, disposition)

Exports tab: buttons for CSV and PDF; patient-level export link

Audit tab: chronological user and AI actions

Example payloads
Create patient (de-identified)
{
  "pseudoId": "HMAC_9f3a1c2b",
  "ageYears": 56,
  "sex": "F",
  "tags": ["latex_allergy"]
}

Timeline entry (vision)
{
  "ts": "2025-10-09T09:17:00Z",
  "source": "vision",
  "module": "intraop",
  "vitals": {
    "HR": {"value": "72", "unit": "bpm"},
    "SpO2": {"value": "98", "unit": "%"}
  },
  "ventilation": {
    "EtCO2": {"value": "36", "unit": "mmHg"},
    "PEEP": {"value": "5", "unit": "cmH2O"}
  },
  "aiAudit": {"model":"gpt-4o-mini","promptId":"vision_v1","masks":[[0,0,1200,200]]}
}

Voice → event
{
  "ts": "2025-10-09T09:20:30Z",
  "source": "voice",
  "module": "intraop",
  "events": [{"type":"drug_bolus","details":{"drug":"propofol","dose":"50 mg","route":"IV"}}],
  "rawNote": "Propofol 50 milligrams IV"
}

Pre-op extraction (result to accept)
{
  "demographics": {"age_years": 67, "sex": "M"},
  "asaClass": "III",
  "allergies": [{"substance":"penicillin","reaction":"rash","severity":"moderate"}],
  "current_medications": [{"drug":"amlodipine","dose":"5 mg","route":"PO","freq":"qday"}],
  "comorbidities": ["HTN","DM2"],
  "airway": {"mallampati":"III","dentition":"upper crown 11"},
  "anesthesia_history": {"PONV": true, "MH": false, "difficult_airway": false},
  "fasting": {"last_solids": "2025-10-09T06:00:00Z", "last_clear": "2025-10-09T08:00:00Z"},
  "planned_anesthesia": "GA with ETT",
  "notes": "Previous hypotension under GA; consider reduced induction dose.",
  "proposed_ASA": "III",
  "proposed_anesthesia_plan": "General anesthesia with ETT, opioid-sparing strategy due to OSA and HTN; consider PONV prophylaxis (dexamethasone + ondansetron)."
}

Acceptance tests (definition of done)

Patients & Cases

Create a de-identified patient (pseudoId + age + sex).

Create a case with planned surgery/date; tabs visible.

Pre-op

Upload/paste pre-op content containing identifiers → redaction preview appears.

Run extract → get structured fields + proposed ASA and anesthesia plan.

Accept per-field suggestions; edit manually; save.

Intra-op

Upload a sample monitor photo → normalized vitals/ventilation appended (source=vision).

Upload a short audio (“Propofol 50 mg IV”) → event added (source=voice).

Manually add: “Intubation start”, IV line (18G left forearm), airway (ETT 7.5).

Edit an entry; see audit entry created.

Post-op

Upload a PACU monitor image → vitals entry created (module=postop).

Add pain score and ondansetron event manually.

Exports & Audit

Download CSV and PDF; CSV lines have ts,module,label,value,unit,source,details_json.

Audit view lists AI actions with prompt/model identifiers and redaction masks.

Notes for your implementation

Keep manual override first-class: AI never auto-commits; always show a review step.

Store UTC timestamps; convert for display.

Abstract file storage (demo can use local /tmp/storage; easy to swap for S3 later).

Keep AI input/output snippets in aiAudit for traceability.

Provide a feature flag to disable all AI calls and rely on manual inputs only.

If you want, I can tailor the normalization map or the pre-op field list further to match your local forms.

Du:
we currenty use this cloudbased anesthaisa record whose i'd recalc the UI because is very ergonomic. Can i drop them directly within replit AI or are also usefull to you to improve the actual prompt?
ChatGPT:
Nachgedacht für 18s

Short answer: yes—drop those screenshots into Replit AI. Visual context helps it copy layout, spacing, and micro-interactions. And yep, they’re useful for me too: I’ve turned them into a tighter, UI-driven prompt you can paste into your existing project.

Below is a stack-agnostic UI prompt that (1) tells Replit to replicate the ergonomics of your current app, (2) wires the screens to the data model we already defined, and (3) leaves framework choices to your project.

🔧 UI Prompt — “Replicate AWR-style Anesthesia Record”

Design goal: Recreate the ergonomics of the provided screenshots (timeline-centric intra-op sheet, right sidebar with structured fields, pre-op checklist cards, and a compact case overview + print preview). Match layout and interaction patterns; keep everything editable manually with optional AI-assist actions.

Screens to build

Patient list & detail

List: search, filters (tags, last ASA), create patient.

Detail: demographics (de-identified allowed), chips for allergies/ASA, table of cases with status, “New case”.

Case workspace with tabs (sticky header: patient + case summary)

Tabs: Pre-op | Anesthesia | Post-op | Exports | Audit.

Pre-op tab (based on your third screenshot)

Top cards: Planned procedure, OP date, urgency (color badges), location, surgeon.

Classification grid: ASA radio, METs (activity bands), capacity/orientation, dentition, Mallampati I–IV, anticipated intubation problems, PONV risk checkbox set.

Planned procedures: checkboxes (Intubation, LMA, Mask, Blocks, Analgesia, etc.), “Extras” (artery, CVC, jet ventilation, prone etc.).

History & special notes panels.

AI Assist panel (right drawer or bottom sheet):

Upload PDF/image OR paste text → redaction preview (original vs redacted).

Button “Extract & Propose” → propose ASA + anesthesia plan + fillable fields.

Per-field accept/decline with inline diff.

Save banner with validation.

Anesthesia tab (based on your first two screenshots)

Timeline area (full width, top):

Minute scale across the top with zoom.

Series dots/lines: NIBP (blue), HR (red), optional IBP channels, shaded anesthesia window, OR room segments (Saal/Bedt).

Hover → crosshair and tooltip with timestamp + values.

Bands below the chart (stacked rows):

Heart rhythm strip label.

Numeric vitals ticker (SpO₂, Temp, etc.) at discrete times.

Events/Measures lane with icons (N, RL, O₂, positioning, incision, extubation). Drag to adjust time.

Medications swimlanes (one lane per active infusion/TCI; discrete dots for boluses; numeric dose labels). Dotted red line for target/rate if applicable.

Ventilation parameters bar/line (mode labels: PCV, PSV, CPAP; parameters like PEEP, Ppeak).

Installations lane for lines/airway (IV gauge & site badges, A-line, CVC, ETT size, LMA).

Right info panel (sticky, like your screenshots):

Case information (planned surgery/date, ASA, allergies).

Personnel list with timestamps.

Access/lines, techniques, airway block with start/end.

Comments/notes.

Controls row:

“Upload monitor photo” → AI parse → preview → “Append to timeline”.

“Record/Upload voice” → transcribe → parse → event proposal.

“Add manual” menus: Vital, Event, Drug (bolus/infusion/TCI), Installation, Airway.

Undo/Redo, Zoom in/out.

Inline edit on all entries; audit chip shows source (manual/vision/voice).

Post-op tab

Compact timeline + vitals table.

Fields: pain score, sedation, PONV, complications, analgesia given, disposition.

Same AI/photo/voice helpers.

Exports tab

PDF preview (right pane) mirroring the anesthesia sheet layout.

Buttons: Download PDF, Download CSV (long form).

Audit tab

Chronological list: user, action, entity, timestamp; expandable to show AI prompt/response metadata.

🧭 Interactions & ergonomics to copy from the screenshots

Dense but scannable grid; subtle row tints per band.

Small iconography for event types; hover tooltips with legend text.

Right panel with collapsible sections; start/end times per item with traffic-light badges.

Timeline drag handles for durations; snapping to minute grid.

Color coding consistent across the app (NIBP blue, HR red, SpO₂ violet/indigo, infusions green area, warnings amber/red).

Sticky headers on scroll.

🎨 Suggested palette (extracted from your images)

Use these as a base; adjust as needed for contrast:

Neutrals: #e8edeb, #ebedec, #adafae, #a9abac, #b9c7b8

Blues/Cyans (lines, chrome): #a8d2e3, #abd0dd, #a5b0cf

Accents (alerts & meds): #ece9ae, #f5efb4, #fdfc7b, #dea5ac

Typography: compact sans (e.g., Inter/Source Sans), 12–14px base with 11px for dense labels; bold only for section titles and current values.

🧩 Data wiring (what each UI component reads/writes)

All tabs operate on the entities we already defined: Patient, Case, PreopRecord, AnesthesiaRecord, PostopRecord, TimelineEntry, Attachment, AuditEntry.

Timeline series read from TimelineEntry:

vitals keys: HR, NIBP_sys, NIBP_dia, NIBP_mean, SpO2, Temp

ventilation keys: EtCO2, RR, TV, FiO2, PEEP, Ppeak, Pmean, MAC, TOF_count, TCI_target, Pump_rate

Right panel sections are derived from Case, AnesthesiaRecord (airwayManagement, lines), and PreopRecord (allergies, ASA, notes).

Inline edits create/patch TimelineEntry rows and log an AuditEntry.

🤖 AI hooks (keep the same privacy rules)

Pre-op AI: /api/cases/:caseId/preop/extract
Input: redacted text or redacted images → return fields + proposed_ASA, proposed_anesthesia_plan.
UI: show diff per field; accepting writes to PreopRecord.

Monitor photo AI: /api/cases/:caseId/frames
Input: locally blurred image → return normalized map; append TimelineEntry (source="vision").

Voice AI: /api/cases/:caseId/voice
Input: audio → STT → event JSON; append TimelineEntry (source="voice").

Always store aiAudit (prompt/model/masks) and require user approval before commit.

🧪 UI acceptance checklist

Timeline renders your sample pattern: blue NIBP points with shaded region; red HR hearts; SpO₂ band; numeric tickers along time.

Draggable event bars; hover tooltips with timestamp + values.

Right info panel mirrors your structure: personnel & times, lines with start/end, techniques, airway notes, comments.

Pre-op grid looks like your screenshot (classification & planned procedures).

PDF preview resembles the anesthesia sheet (layout and color cues).

📎 How to use the screenshots

Yes, upload them in Replit AI along with this prompt and say: “Mimic these layouts and interactions.”

If the tool can’t view images, keep them as visual reference for colors and spacing while you implement; the above palette and spec encode the key cues it needs.

If you want, I can also generate a compact component checklist (cards, bands, legends, icons) or a JSON legend for the timeline (icon → meaning) you can feed to the UI so the chart and the sidebar stay consistent.

Du:
I'm missing a point that os not perfct clear to me: when i send the AI an image to intepret and i get back like vitals values for ecxample or send a vocal command to interpret like giving 10mg adrenalin and this is exctreacted and given back. How does my app to know where to insert the returned information? I want to basically work handfree. How this is suppose to work?
ChatGPT:

Great question. The “hands-free” part works if your app always knows three things for every AI result:

Which patient & case is “active”

Which phase (pre-op / intra-op / post-op) is active

What exact timestamp (and lane) to write into

Below is a practical way to make that automatic and reliable.

1) Session context = where to write

Keep a tiny state machine per user/device:

Active Patient → patientId

Active Case → caseId

Active Module → "preop" | "intraop" | "postop"

Recording Mode → "idle" | "live" (live means auto-commit)

Clock Sync → offset between device and server clocks

How set it, hands-free?

You (or voice) open/select the case once (“Start case Smith knee arthroscopy”) → app sets the context and stays there until you say “switch case” or “stop”.

Wearable/phone shows a tiny HUD with the current context (for safety).

If there’s no active case, results go to an Inbox (needs one tap/voice to assign).

2) Timestamping (so entries land at the right minute)

Each AI call returns (or your app derives) a timestamp:

Voice: use server receive time minus median model latency; also keep the exact server receive time.

Image (monitor photo): best is to read the on-screen clock; if not present, use the image EXIF time; else use server receive time.

Clock sync: maintain device_to_server_offset and apply it to get UTC.

If confidence in time < threshold → drop into Timeline Inbox for quick confirm rather than auto-commit.

3) Lanes & auto-placement rules

Think of the anesthesia sheet as lanes. For each payload, pick the lane automatically:

Payload kind	Lane	Example auto-mapping
Vitals (HR, SpO₂, NIBP…)	Vitals lane	vitals = {"HR":72,"SpO2":98}
Ventilation params (PEEP, EtCO₂, RR, mode)	Ventilation lane	ventilation = {"PEEP":5,"EtCO2":36,"mode":"PCV"}
Drug bolus	Drugs lane (bolus)	events=[{type:"drug_bolus", drug:"adrenaline", dose:"10 mg", route:"IV"}]
Infusion / TCI	Drugs lane (infusion/TCI)	drugs=[{name:"propofol", mode:"TCI", target:"2.5 µg/mL"}]
Airway actions	Events / Airway	events=[{type:"intubation_start"}] or installations=[{type:"ETT", size:"7.5"}]
Lines	Installations lane	installations=[{type:"IV", site:"left forearm", gauge:"18G"}]
Positioning / Surgical milestones	Events lane	events=[{type:"incision"}]

Your app’s mapper turns AI JSON → one TimelineEntry with the correct fields at that ts.

4) De-duplication & merge (so you don’t get spam)

Define simple merge rules per label:

Vitals: one point per label per minute bucket. If a new AI value arrives within the same minute:

keep the higher-confidence value; if equal, keep the latest; mark the entry as “merged”.

BP: prefer invasive (IBP) over NIBP for the same minute if both present.

Infusions/TCI: treat as stateful. New rate/target updates the current segment; boluses always append.

Events: same type within ±30 s → collapse to one (keep earliest).

Lines/Airway: idempotent by a compound key (e.g., ("IV","left forearm","18G")).

Have a small “Conflict policy” map and a confidence score from the AI; store both in aiAudit.

5) Voice command grammar (so it files itself)

Teach a tiny intent grammar. Examples:

Drug bolus: “adrenaline 10 milligrams IV” → {event:"drug_bolus", drug:"adrenaline", dose:"10 mg", route:"IV"}

Infusion: “start remifentanil two milliliters per hour” → {drugs:[{name:"remifentanil", mode:"infusion", rate:"2 mL/h"}]}

TCI: “propofol target two point five micrograms per milliliter” → {drugs:[{name:"propofol", mode:"TCI", target:"2.5 µg/mL"}]}

Event: “intubation started”, “position checked”, “incision”, “extubation”.

Lines/Airway: “eighteen gauge IV left forearm”, “ETT seven point five”.

The parser outputs normalized JSON + ts. The router picks the lane based on event or mode.

Tip: add “at” time support if you dictate after the fact:

“Phenylephrine fifty micrograms at ten oh three” → write at 10:03.

6) Auto-routing algorithm (pseudo-code)
def handle_ai_payload(payload, context):
    caseId = context.caseId or inbox_route(payload)
    module = context.module or infer_module(payload)  # e.g., if postop tab open
    ts = resolve_timestamp(payload)  # use on-screen clock > EXIF > server time

    # Normalize keys & classify lane(s)
    norm = normalize(payload)
    lanes = classify_lanes(norm)  # vitals / ventilation / drugs / events / installations

    # Build a single TimelineEntry for this ts
    entry = {
        "caseId": caseId,
        "module": module,
        "ts": ts,
        "source": payload.source,  # 'vision' | 'voice'
        "vitals": norm.get("vitals"),
        "ventilation": norm.get("ventilation"),
        "drugs": norm.get("drugs"),
        "events": norm.get("events"),
        "installations": norm.get("installations"),
        "rawNote": payload.raw_text,
        "aiAudit": payload.audit
    }

    # De-dup/merge with existing minute bucket
    existing = find_entry(caseId, module, minute_bucket(ts))
    if existing:
        merged = merge_entries(existing, entry, policy=CONFLICT_RULES)
        save(merged); audit("merge_timeline", existing.id)
    else:
        save(entry); audit("create_timeline", entry.id)

7) “Live mode” vs “Inbox review”

Live: auto-commit immediately using rules above (true hands-free).

Inbox: uncertain confidence or missing context → land in an Inbox tray; one tap/voice to approve or adjust timestamp.

Set thresholds:

If confidence < 0.7, or timestamp couldn’t be resolved → Inbox.

Otherwise Live.

8) Safety nets you want

Undo last N commits (per user).

Lock the case when not in use; voice: “stop recording”.

Quick voice checks: “status?” → the HUD reads back active patient/case and last committed entries.

Out-of-order arrivals: always write by ts, not arrival order.

9) How this feels in practice

You start case → say “start recording”.

You take a quick photo of the monitor → HR/NIBP/SpO₂/EtCO₂ appear at the right minute.

You say “adrenaline ten milligrams IV” → a drug_bolus icon appears at that minute.

You say “intubation started” → event bar starts; later “intubation complete” closes it.

You say “ETT seven point five” → airway installation appears.

No taps needed unless confidence or time is uncertain, then a small banner asks to confirm.